<launch>
   <!-- Make sure we are not using simulated time -->
   <param name="/use_sim_time" value="false" />

   <!-- Launch the arbotix driver in fake mode by default -->
   <arg name="sim" default="false" />

   <!-- If using a real controller, look on /dev/ttyUSB0 by default -->
   <arg name="port" default="/dev/ttyUSB0" />

   <!-- Load the URDF/Xacro model of our robot -->
   <param name="robot_description" command="$(find xacro)/xacro.py '$(find turret_description)/urdf/turret/turret.xacro'" />

   <node name="arbotix" pkg="arbotix_python" type="arbotix_driver" clear_params="true" output="screen">
      <rosparam file="$(find turret)/config/turret.yaml" command="load" />
      <param name="sim" value="$(arg sim)" />
      <param name="port" value="$(arg port)" />
   </node>

   <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
      <param name="publish_frequency" type="double" value="20.0" />
   </node>

   <!-- Start all servos in a relaxed state -->
   <node pkg="turret" type="arbotix_relax_all_servos.py" name="relax_all_servos" unless="$(arg sim)" />

   <!-- Load diagnostics -->
   <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" clear_params="true" unless="$(arg sim)">
      <rosparam command="load" file="$(find turret)/config/turret_diagnostics.yaml" />
   </node>

   <node pkg="rqt_robot_monitor" type="rqt_robot_monitor" name="rqt_robot_monitor" unless="$(arg sim)" />

   <!-- We need a few static transforms to handle the wheels and base_footprint
   <node pkg="tf" type="static_transform_publisher" name="odom_left_wheel_broadcaster" args="0.07 0.13 0.015 0 1.57 1.57 /base_link /base_l_wheel_link 100" />
   <node pkg="tf" type="static_transform_publisher" name="odom_right_wheel_broadcaster" args="0.07 -0.13 0.015 0 -1.57 -1.57 /base_link /base_r_wheel_link 100" />-->

</launch>
